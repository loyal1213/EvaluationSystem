<map name="MapBox" type="geocentric" version="2">
	<image name="mapbox_satellite" driver="xyz">
		<url>http://a.tiles.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}.jpg?access_token=pk.eyJ1IjoiMTUyMjU2OTEyMjVqenciLCJhIjoiY2w5cDBrMTdxMDJkeDNvdWxiMWRmZHJmbCJ9.mw-zTRiSS0s8xsVtKHsRMw</url>
		<profile>spherical-mercator</profile>
	</image>
	<elevation name="mapbox_terrain" driver="xyz" max_data_level="14">
		<url>http://api.mapbox.com/v4/mapbox.terrain-rgb/{z}/{x}/{y}.pngraw?access_token=pk.eyJ1IjoiMTUyMjU2OTEyMjVqenciLCJhIjoiY2w5cDBrMTdxMDJkeDNvdWxiMWRmZHJmbCJ9.mw-zTRiSS0s8xsVtKHsRMw</url>
		<profile>spherical-mercator</profile>
		<elevation_encoding>mapbox</elevation_encoding>
	</elevation>
	<image name="GlobeBoundary" driver="agglite">
		<features name="world" driver="ogr">
			<url>../shps/world.shp</url>
			<build_spatial_index>true</build_spatial_index>
		</features>
		<geometry_type>line</geometry_type>
		<relative_line_size>true</relative_line_size>
		<styles>
			<style type="text/css">
				world{
				stroke: #ffff00;
				stroke-opacity: 1.0;
				stroke-width: 2;
				}
			</style>
		</styles>
	</image>
	<image name="ChinaBoundary" driver="agglite">
		<features name="provincial" driver="ogr">
			<url>../shps/provincial_boundaries.shp</url>
			<build_spatial_index>true</build_spatial_index>
		</features>
		<geometry_type>line</geometry_type>
		<relative_line_size>true</relative_line_size>
		<styles>
			<style type="text/css">
				provincial{
				stroke: #ffffff;
				stroke-opacity: 1.0;
				stroke-width: 1.5;
				}
			</style>
		</styles>
	</image>
	<image name="CountryBoundary" driver="agglite">
		<features name="country" driver="ogr">
			<url>../shps/country_boundaries.shp</url>
			<build_spatial_index>true</build_spatial_index>
		</features>
		<geometry_type>line</geometry_type>
		<relative_line_size>true</relative_line_size>
		<styles>
			<style type="text/css">
				country {
				stroke:             #FFF8DC;
				stroke-width:       0.8px;
				altitude-clamping:  terrain-drape;
				stroke-opacity: 		 0.8px;
				}
			</style>
		</styles>
	</image>
	<model name="mapbox_streets" driver="feature_geom">
		<features name="mapbox_streets" driver="xyz">
			<url>http://[abcd].tiles.mapbox.com/v4/mapbox.mapbox-streets-v7/{z}/{x}/{y}.vector.pbf?access_token=pk.eyJ1IjoiMTUyMjU2OTEyMjVqenciLCJhIjoiY2w5cDBrMTdxMDJkeDNvdWxiMWRmZHJmbCJ9.mw-zTRiSS0s8xsVtKHsRMw</url>
			<!-- Change this to pick what level you want to view the mapbox data at, just keep min_level and max_level the same -->
			<min_level>15</min_level>
			<max_level>15</max_level>
			<profile>spherical-mercator</profile>
			<format>pbf</format>
			<invert_y>true</invert_y>
		</features>
		<feature_indexing enabled="true"></feature_indexing>
		<styles>
			<library name="us_resources">
				<url>../data/resources/textures_us/catalog.xml</url>
			</library>
			<style type="text/css">
                hospital {
                     icon: "../data/hospital.png";
                     icon-align:    center-center;
                     icon-declutter: true;
                     text-content:  getName();
                     altitude-clamping:       terrain;
                     altitude-resolution: 0.001;
                }

                school {
                     icon: "../data/school.png";
                     icon-align:    center-center;
                     icon-declutter: true;
                     text-content:  getName();
                     altitude-clamping:       terrain;
                     altitude-resolution: 0.001;
                }

                bank {
                     icon: "../data/bank.png";
                     icon-align:    center-center;
                     icon-declutter: true;
                     text-content:  getName();
                     altitude-clamping:       terrain;
                     altitude-resolution: 0.001;
                }

                forest {
                   model:               "../data/tree.osg";
                   model-placement:     random;
                   model-density:       10000;
                   model-scale:         2.5;
                   model-random-seed:   1;
                   altitude-clamping:       terrain;
                   altitude-resolution: 0.001;
                }

                grass {
                   model:               "../data/tree.osg";
                   model-placement:     random;
                   model-density:       10000;
                   model-scale:         2.5;
                   model-random-seed:   1;
                   altitude-clamping:       terrain;
                   altitude-resolution: 0.001;
                }

                water {
                   fill:               #6BA8FF;
                   render-depth-test:  false;
                   altitude-clamping:  terrain-drape;
                }

                buildings {
                  extrusion-height:      getBuildingHeight();
                  extrusion-flatten:     true;
                  extrusion-wall-style:  building-wall;
                  extrusion-roof-style:  building-rooftop;
                  altitude-clamping:     terrain;
                  altitude-resolution: 0.001;
                }

                building-wall {
                  skin-library:     us_resources;
                  skin-tags:        building;
                  skin-random-seed: 1;
                  fill:             #ffffff;
                }
                building-rooftop {
                  skin-library:     us_resources;
                  skin-tags:        rooftop;
                  skin-tiled:       true;
                  skin-random-seed: 1;
                  fill:             #ffffff;
                }

                roads {
                  stroke:             #656363;
                  stroke-width:       5m;
                  altitude-clamping:  terrain-drape;
                  stroke-tessellation-size: 5m;
                  render-order: 100;
                }

			</style>
			<selector name="default" style_expr="selectStyle()"/>
			<script language="javascript"><![CDATA[

                function selectStyle() {

                    var layer = feature.properties["mvt_layer"];
                    if (layer === "building") return "buildings";
                    if (layer === "water") return "water";
                    if (layer === "road") return "roads";
                    if (layer === "landuse") {
                         var cls = feature.properties["class"];
                         if (cls === "grass") {
                             return "forest";
                         }
                         else if (cls === "wood") {
                             return "forest";
                         }
                    }
                    return null;
                }

                function getName() {
                    if ("name" in feature.properties) {
                        return feature.properties["name"];
                    }
                    return "";
                }

                function getBuildingHeight() {
                    return feature.properties["height"];
                }
              ]]></script>
		</styles>
	</model>
	<xi:include href="viewpoints.xml"/>
	<options>
		<cache type="filesystem">
			<path>c:/osgearth_cache</path>
		</cache>
		<lighting>false</lighting>
	</options>
</map>